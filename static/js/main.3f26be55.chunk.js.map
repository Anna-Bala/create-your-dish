{"version":3,"sources":["DishForm.js","app/actions.js","App.js","app/reducers.js","app/store.js","index.js"],"names":["mapDispatchToProps","dishName","text","type","dishTime","time","dishType","option","dishNoSlices","number","dishDiameter","dishSpiciness","range","dishNoBread","responseSuccess","response","responseError","DishFormContainer","connect","state","dishForm","dishReducer","orders","responseReducer","props","name","preparation_time","no_of_slices","diameter","spiciness_scale","slices_of_bread","pizza","htmlFor","id","value","min","onChange","e","parseInt","target","required","step","parseFloat","soup","max","sandwich","className","onSubmit","preventDefault","requestOptions","method","headers","body","JSON","stringify","fetch","then","a","isJson","get","includes","json","data","ok","Promise","reject","catch","handleSubmit","defaultValue","formByType","map","order","index","content","App","INITIAL_STATE_FORM","INITIAL_STATE_RESPONSE","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f26be55.chunk.js","sourcesContent":["import { connect } from 'react-redux';\r\nimport { dishName, dishTime, dishType, dishNoSlices, dishDiameter, dishSpiciness, dishNoBread, responseSuccess, responseError } from './app/actions';\r\n\r\nconst handleSubmit = (e, dishForm, responseSuccess, responseError) => {\r\n    e.preventDefault();\r\n    if(dishForm.type === 'pizza') {\r\n        delete dishForm.spiciness_scale;\r\n        delete dishForm.slices_of_bread;\r\n    } else if(dishForm.type === 'soup') {\r\n        delete dishForm.no_of_slices;\r\n        delete dishForm.diameter;\r\n        delete dishForm.slices_of_bread;\r\n    } else {\r\n        delete dishForm.no_of_slices;\r\n        delete dishForm.diameter;\r\n        delete dishForm.spiciness_scale;\r\n    }\r\n\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(dishForm)\r\n    };\r\n\r\n    fetch('https://frosty-wood-6558.getsandbox.com:443/dishes', requestOptions)\r\n        .then(async response => {\r\n            const isJson = response.headers.get('content-type')?.includes('application/json');\r\n            const data = isJson && await response.json();\r\n            if (!response.ok) {\r\n                return Promise.reject(data);\r\n            };\r\n            \r\n            responseSuccess(data);\r\n        })\r\n        .catch(data => {\r\n            responseError(data);\r\n        });\r\n}\r\n\r\nexport const DishForm = (props) => {\r\n    const { \r\n    name,\r\n    preparation_time,\r\n    type,\r\n    no_of_slices,\r\n    diameter,\r\n    spiciness_scale,\r\n    slices_of_bread\r\n    } = props.dishForm;\r\n\r\n    const {\r\n        dishName,\r\n        dishTime,\r\n        dishType,\r\n        dishNoSlices,\r\n        dishDiameter,\r\n        dishSpiciness,\r\n        dishNoBread,\r\n        responseSuccess,\r\n        responseError\r\n    } = props;\r\n\r\n    const pizza = (\r\n        <>\r\n        <label htmlFor=\"no_of_slices\">Number of slices:</label>\r\n        <input type=\"number\" id=\"no_of_slices\" name=\"no_of_slices\" value={no_of_slices} min=\"1\" onChange={(e) => dishNoSlices(parseInt(e.target.value))} required={type === 'pizza'? true : false}/>\r\n        <br/>\r\n        <label htmlFor=\"diameter\">Diameter:</label>\r\n        <input type=\"number\" step=\"0.1\" id=\"diameter\" name=\"diameter\" value={diameter} min=\"0.1\" onChange={(e) => dishDiameter(parseFloat(e.target.value))} required={type === 'pizza'? true : false}/>\r\n        </>\r\n    );\r\n\r\n    const soup = (\r\n        <>\r\n        <label htmlFor=\"spiciness_scale\">Spiciness scale:</label>\r\n        <input type=\"range\" id=\"spiciness_scale\" name=\"spiciness_scale\" value={spiciness_scale} min=\"1\" max=\"10\" onChange={(e) => dishSpiciness(parseInt(e.target.value))} required={type === 'soup'? true : false}/>\r\n        <p>Spiciness: {spiciness_scale}</p>\r\n        </>\r\n    );\r\n\r\n    const sandwich = (\r\n        <>\r\n        <label htmlFor=\"slices_of_bread\">Slices of bread:</label>\r\n        <input type=\"number\" id=\"slices_of_bread\" name=\"slices_of_bread\" value={slices_of_bread} min=\"1\" onChange={(e) => dishNoBread(parseInt(e.target.value))} required={type === 'sandwich'? true : false}/>\r\n        </>\r\n    );\r\n\r\n    const formByType = () => {\r\n        switch (type) {\r\n            case 'pizza': return pizza;\r\n            case 'soup': return soup;\r\n            case 'sandwich': return sandwich;\r\n            default: return null;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            <div className=\"formContainer\">\r\n                <h2>Create your dish</h2>\r\n                <form onSubmit={(e) => handleSubmit(e, props.dishForm, responseSuccess, responseError)}>\r\n                    <label htmlFor=\"name\">Name:</label>\r\n                    <input type=\"text\" id=\"name\" name=\"name\" value={name} onChange={(e) => dishName(e.target.value)} required/>\r\n                    <br/>\r\n                    <label htmlFor=\"preparation_time\">Preparation time:</label>\r\n                    <input type=\"time\" id=\"preparation_time\" name=\"preparation_time\" step=\"1\" value={preparation_time} onChange={(e) => dishTime(e.target.value)} required/>\r\n                    <br/>\r\n                    <label htmlFor=\"type\">Choose a dish:</label>\r\n                    <select name=\"type\" id=\"type\" onChange={(e) => dishType(e.target.value)}>\r\n                        <option value=\"pizza\" defaultValue>Pizza</option>\r\n                        <option value=\"soup\">Soup</option>\r\n                        <option value=\"sandwich\">Sandwich</option>\r\n                    </select>\r\n                    <br/>\r\n                    {formByType()}\r\n                    <br/>\r\n                    <button type=\"submit\">Compose dish</button>\r\n                </form>\r\n            </div>\r\n            <div className=\"ordersContainer\">\r\n                <h2>Your orders:</h2>\r\n                {props.orders.map((order, index) => {\r\n                    let content = null;\r\n\r\n                    switch(order.type) {\r\n                        case 'pizza': content = (<p>Type: pizza, Number of slices: {order.no_of_slices}, Diameter: {order.diameter}</p>); break;\r\n                        case 'soup': content = (<p>Type: soup, Spiciness scale: {order.spiciness_scale}</p>); break;\r\n                        case 'sandwich': content = (<p>Type: sandwich, Slices of bread: {order.slices_of_bread}</p>); break;\r\n                        default: return null;\r\n                    }\r\n\r\n                    return (\r\n                    <div key={index} className=\"order\">\r\n                        <p>ID: {index} Name: {order.name}</p>\r\n                        <p>Preparation time: {order.preparation_time}</p>\r\n                        {content}\r\n                        <hr/>\r\n                    </div>\r\n                )})}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { \r\n        dishForm: state.dishReducer,\r\n        orders: state.responseReducer \r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = { dishName, dishTime, dishType, dishNoSlices, dishDiameter, dishSpiciness, dishNoBread, responseSuccess, responseError };\r\n  \r\nexport const DishFormContainer = connect(mapStateToProps, mapDispatchToProps)(DishForm);\r\n  ","export const dishName = (text) => ({\r\n    type: 'DISH_NAME',\r\n    text\r\n  });\r\n\r\nexport const dishTime = (time) => ({\r\n    type: 'DISH_PREPARATION_TIME',\r\n    time\r\n  });\r\n\r\nexport const dishType = (option) => ({\r\n    type: 'DISH_TYPE',\r\n    option\r\n  }); \r\n\r\nexport const dishNoSlices = (number) => ({\r\n    type: 'DISH_NO_SLICES',\r\n    number\r\n  });\r\n\r\nexport const dishDiameter = (number) => ({\r\n    type: 'DISH_DIAMETER',\r\n    number\r\n  });\r\n\r\nexport const dishSpiciness = (range) => ({\r\n    type: 'DISH_SPICINESS_SCALE',\r\n    range\r\n  });\r\n\r\nexport const dishNoBread = (number) => ({\r\n    type: 'DISH_NO_BREAD',\r\n    number\r\n  });\r\n  \r\nexport const responseSuccess = (response) => ({\r\n    type: 'RESPONSE_SUCCESS',\r\n    response\r\n  }); \r\n  \r\nexport const responseError = (response) => ({\r\n    type: 'RESPONSE_ERROR',\r\n    response\r\n  });  ","import React from 'react';\nimport { DishFormContainer as DishForm } from './DishForm';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <DishForm/>\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\r\n\r\nconst INITIAL_STATE_FORM = {\r\n    name: '',\r\n    preparation_time: '',\r\n    type: 'pizza',\r\n    no_of_slices: '',\r\n    diameter: '',\r\n    spiciness_scale: 1,\r\n    slices_of_bread: ''\r\n};\r\n\r\nconst INITIAL_STATE_RESPONSE = [];\r\n\r\nconst dishReducer = (state = INITIAL_STATE_FORM, action) => {\r\n    switch (action.type) {\r\n        case 'DISH_NAME': return {...state, name: action.text};\r\n        case 'DISH_PREPARATION_TIME': return {...state, preparation_time: action.time};\r\n        case 'DISH_TYPE': return {...state, type: action.option};\r\n        case 'DISH_NO_SLICES': return {...state, no_of_slices: action.number};\r\n        case 'DISH_DIAMETER': return {...state, diameter: action.number};\r\n        case 'DISH_SPICINESS_SCALE': return {...state, spiciness_scale: action.range};\r\n        case 'DISH_NO_BREAD': return {...state, slices_of_bread: action.number};\r\n        default: return state\r\n    };\r\n};\r\n\r\nconst responseReducer = (state = INITIAL_STATE_RESPONSE, action) => {\r\n    switch (action.type) {\r\n        case 'RESPONSE_SUCCESS': return [...state, action.response];\r\n        case 'RESPONSE_ERROR': return [...state, action.response];\r\n        default: return state\r\n    };\r\n};\r\n\r\nexport const rootReducer = combineReducers({dishReducer, responseReducer});","import { createStore } from '@reduxjs/toolkit';\r\nimport { rootReducer } from './reducers';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools());","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './style.css';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}